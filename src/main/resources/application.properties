server.port=8083

spring.profiles.active=@spring.profiles.active@


# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://localhost:3306/inspection?useTimezone=true&serverTimezone=UTC&useSSL=false
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# Username and password
spring.datasource.username = root
spring.datasource.password = root

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.type=trace

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.properties.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ===============================
# = FLYWAY CONFIG
# ===============================

# Enter migration package and run cmd $ mvn clean package spring-boot:run
spring.flyway.url=jdbc:mysql://localhost:3306/
spring.flyway.schemas=inspection
spring.flyway.user=root
spring.flyway.password=root

# ===============================
# = JACKSON CONFIG
# ===============================

# When properties are null they are not serializable
spring.jackson.default-property-inclusion=non_null

# When the request send a field that not contains on the entity, an error is popped out
spring.jackson.deserialization.fail-on-unknown-properties=true

logging.level.root=info